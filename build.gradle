group "ru.performance"
version "1.0"

allprojects {
    apply plugin: "java"

    defaultTasks "test"

    sourceCompatibility = JavaVersion.VERSION_11

    // The encoding of the source - UTF-8
    [compileJava, compileTestJava]*.options*.encoding = "UTF-8"
}

repositories {
    jcenter()
    mavenCentral()      // Центральный
    mavenLocal()        // Локальный

    // For ReportPortal
    maven { url "http://dl.bintray.com/epam/reportportal/" }

    // For TestNG Snapshots
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }

    // For Sikuli Snapshots
    maven {
        url "http://oss.sonatype.org/content/groups/public"
    }
}

dependencies {

    // Selenide
    testCompile "com.codeborne:selenide:5.1.0"

    // TestNG
    testImplementation "org.testng:testng:6.14.2"

    // Log4j2
    testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:2.11.1"
    testImplementation "org.apache.logging.log4j:log4j-core:2.11.1"
    testImplementation "org.apache.logging.log4j:log4j-jul:2.11.1"
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.9.8"

    // ReportPortal
    testImplementation "com.epam.reportportal:agent-java-testng:4.2.3-BETA"
    testImplementation "com.epam.reportportal:logger-java-log4j:4.0.1"
    testImplementation "com.epam.reportportal:logger-java-log4j:4.0.1"

    // json
    testImplementation "com.google.code.gson:gson:2.8.5"

    // E-mail
    testImplementation "com.sun.mail:javax.mail:1.6.2"

    // JSoup
    testImplementation "org.jsoup:jsoup:1.11.3"

    // RestAssured
    testImplementation "io.rest-assured:rest-assured:3.3.0"

    // Owner
    testImplementation "org.aeonbits.owner:owner:1.0.10"


}

// Ignore Gradle warning "Detecting annotation processors on the compile classpath has been deprecated... "
compileTestJava {
    options.compilerArgs += ["-proc:none"]
}


test {
    dependsOn "clean"
    useTestNG()

    // Always run tests even if nothing has changed
    dependsOn "clean"

    // Show "PASSED", "SKIPPED", "FAILED" test results in console
    testLogging { events "passed", "skipped", "failed" }

    options.suites "src/test/resources/prod_testng.xml"
    options.suites "src/test/resources/A1_testng.xml"
    options.suites "src/test/resources/A2_testng.xml"
    options.suites "src/test/resources/A3_testng.xml"
    options.suites "src/test/resources/B1_testng.xml"
    options.suites "src/test/resources/B2_testng.xml"
    options.suites "src/test/resources/B3_testng.xml"
    options.suites "src/test/resources/C1_testng.xml"
    options.suites "src/test/resources/C2_testng.xml"
    options.suites "src/test/resources/C3_testng.xml"

    options.useDefaultListeners = false


    // Защита от запуска тестов не "PROD" группы на продуктовом сервере
    if (testUrl == "") {
        new File("$projectDir/uxcrowd.config").getText("UTF-8").eachLine { urlFromFile ->
            def matcher = urlFromFile =~ "^testUrl"
            if (matcher) {
                testUrl = sprintf("%s", urlFromFile.split("=")[1])
                println "URL from config file: " + testUrl
            }
        }
    } else {
        println "URL from commandline: " + testUrl
    }
    if (testUrl == "https://uxcrowd.ru") {
        printf("\nTesting host: %s\n", testUrl)
        printf("Test group: %s\n", project.gradle.startParameter.taskNames.toString())
        if (project.gradle.startParameter.taskNames.toString().toLowerCase() != "[prod]") {
            printf("Illegal test group for this host!!!\n\n")
            System.exit(0)
        }
    }

    return void

}


tasks.withType(Test) {

    // Variables from "gradle.properties"
    systemProperty "testUrl", "$testUrl"

    reports.html.enabled = false

}


// Run individual test groups

task Prod(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/prod_testng.xml"
    testLogging.showStandardStreams = false     // Logs in console
}

task A1(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/A1_testng.xml"
}

task A2(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/A2_testng.xml"
}

task A3(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/A3_testng.xml"
}

task B1(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/B1_testng.xml"
}

task B2(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/B2_testng.xml"
}

task B3(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/B3_testng.xml"
}

task C1(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/C1_testng.xml"
}

task C2(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/C2_testng.xml"
}

task C3(type: Test) {
    dependsOn "clean"
    useTestNG()
    options.suites "src/test/resources/C3_testng.xml"
}
